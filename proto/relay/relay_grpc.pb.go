// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/relay.proto

package relay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayServiceClient is the client API for RelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayServiceClient interface {
	RelayMessage(ctx context.Context, in *RequestRelayMessage, opts ...grpc.CallOption) (*ResponseRelayMessage, error)
	RelayCreatedConversation(ctx context.Context, in *RequestRelayCreatedConversation, opts ...grpc.CallOption) (*ResponseRelayCreatedConversation, error)
}

type relayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayServiceClient(cc grpc.ClientConnInterface) RelayServiceClient {
	return &relayServiceClient{cc}
}

func (c *relayServiceClient) RelayMessage(ctx context.Context, in *RequestRelayMessage, opts ...grpc.CallOption) (*ResponseRelayMessage, error) {
	out := new(ResponseRelayMessage)
	err := c.cc.Invoke(ctx, "/relay.RelayService/RelayMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayServiceClient) RelayCreatedConversation(ctx context.Context, in *RequestRelayCreatedConversation, opts ...grpc.CallOption) (*ResponseRelayCreatedConversation, error) {
	out := new(ResponseRelayCreatedConversation)
	err := c.cc.Invoke(ctx, "/relay.RelayService/RelayCreatedConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayServiceServer is the server API for RelayService service.
// All implementations must embed UnimplementedRelayServiceServer
// for forward compatibility
type RelayServiceServer interface {
	RelayMessage(context.Context, *RequestRelayMessage) (*ResponseRelayMessage, error)
	RelayCreatedConversation(context.Context, *RequestRelayCreatedConversation) (*ResponseRelayCreatedConversation, error)
	mustEmbedUnimplementedRelayServiceServer()
}

// UnimplementedRelayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServiceServer struct {
}

func (UnimplementedRelayServiceServer) RelayMessage(context.Context, *RequestRelayMessage) (*ResponseRelayMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayMessage not implemented")
}
func (UnimplementedRelayServiceServer) RelayCreatedConversation(context.Context, *RequestRelayCreatedConversation) (*ResponseRelayCreatedConversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayCreatedConversation not implemented")
}
func (UnimplementedRelayServiceServer) mustEmbedUnimplementedRelayServiceServer() {}

// UnsafeRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServiceServer will
// result in compilation errors.
type UnsafeRelayServiceServer interface {
	mustEmbedUnimplementedRelayServiceServer()
}

func RegisterRelayServiceServer(s grpc.ServiceRegistrar, srv RelayServiceServer) {
	s.RegisterService(&RelayService_ServiceDesc, srv)
}

func _RelayService_RelayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRelayMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).RelayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.RelayService/RelayMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).RelayMessage(ctx, req.(*RequestRelayMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayService_RelayCreatedConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRelayCreatedConversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).RelayCreatedConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.RelayService/RelayCreatedConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).RelayCreatedConversation(ctx, req.(*RequestRelayCreatedConversation))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayService_ServiceDesc is the grpc.ServiceDesc for RelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.RelayService",
	HandlerType: (*RelayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayMessage",
			Handler:    _RelayService_RelayMessage_Handler,
		},
		{
			MethodName: "RelayCreatedConversation",
			Handler:    _RelayService_RelayCreatedConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/relay.proto",
}
